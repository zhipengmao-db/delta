Creates a new `SetSchema` pending update that will let us set the latest iceberg schema instead of having to apply incremental/delta changes to the existing schema.

This PR requires that column mapping ID mode be enabled, and uses the same fieldId on the iceberg schema using the delta schema columnIds.

This PR also blocks MapType or ArrayType (on the iceberg side). Doing so requires more complicated fieldId calculation, which is out of scope of this PR and of the first milestone. TLDR Delta Map and Array types have their inner elements as DataTypes, but iceberg Map and List types have their inner elements as actual fields (which need a field ID). So even though delta column mapping ID mode will assign IDs to each delta field, this is insufficient as it won't assign IDs for these maps/array types.

---
 .../java/org/apache/iceberg/SetSchema.java    |  25 ++
 .../java/org/apache/iceberg/Transaction.java  |   7 +
 .../org/apache/iceberg/BaseTransaction.java   |   8 +
 .../iceberg/CommitCallbackTransaction.java    |   5 +
 .../org/apache/iceberg/SetSchemaImpl.java     |  45 ++++
 .../org/apache/iceberg/TableMetadata.java     |  14 +-
 .../IcebergConversionTransaction.scala        | 232 +++++++++---------
 .../tahoe/iceberg/IcebergSchemaUtils.scala    |  55 +++--
 .../iceberg/IcebergTransactionUtils.scala     |  16 +-
 .../IcebergConversionTransactionSuite.scala   | 224 ++++++++++++++++-
 .../tahoe/iceberg/IcebergConverterSuite.scala |   3 +-
 .../iceberg/IcebergSchemaUtilsSuite.scala     | 200 ++++++++-------
 .../IcebergTransactionUtilsSuite.scala        |  25 +-
 13 files changed, 595 insertions(+), 264 deletions(-)
 create mode 100644 api/src/main/java/org/apache/iceberg/SetSchema.java
 create mode 100644 core/src/main/java/org/apache/iceberg/SetSchemaImpl.java

diff --git a/api/src/main/java/org/apache/iceberg/SetSchema.java b/connector/iceberg-core/api/src/main/java/org/apache/iceberg/SetSchema.java
new file mode 100644
index 00000000000..042a594ae5b
--- /dev/null
+++ b/api/src/main/java/org/apache/iceberg/SetSchema.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.iceberg;
+
+/**
+ * API to set the new, latest Iceberg schema.
+ */
+public interface SetSchema extends PendingUpdate<Schema> { }
diff --git a/api/src/main/java/org/apache/iceberg/Transaction.java b/connector/iceberg-core/api/src/main/java/org/apache/iceberg/Transaction.java
index 090b5dfe37c..3879c9a9146 100644
--- a/api/src/main/java/org/apache/iceberg/Transaction.java
+++ b/api/src/main/java/org/apache/iceberg/Transaction.java
@@ -37,6 +37,13 @@ public interface Transaction {
    */
   UpdateSchema updateSchema();

+  /**
+   * Create a new {@link SetSchema} to set the new table schema.
+   *
+   * @return a new {@link SetSchema}
+   */
+  SetSchema setSchema(Schema newSchema);
+
   /**
    * Create a new {@link UpdatePartitionSpec} to alter the partition spec of this table.
    *
diff --git a/core/src/main/java/org/apache/iceberg/BaseTransaction.java b/connector/iceberg-core/core/src/main/java/org/apache/iceberg/BaseTransaction.java
index 241738fedab..e299d04ebbd 100644
--- a/core/src/main/java/org/apache/iceberg/BaseTransaction.java
+++ b/core/src/main/java/org/apache/iceberg/BaseTransaction.java
@@ -113,6 +113,14 @@ public class BaseTransaction implements Transaction {
     return schemaChange;
   }

+  @Override
+  public SetSchema setSchema(Schema newSchema) {
+    checkLastOperationCommitted("SetSchema");
+    SetSchema setSchema = new SetSchemaImpl(transactionOps, transactionOps.current(), newSchema);
+    updates.add(setSchema);
+    return setSchema;
+  }
+
   @Override
   public UpdatePartitionSpec updateSpec() {
     checkLastOperationCommitted("UpdateSpec");
diff --git a/core/src/main/java/org/apache/iceberg/CommitCallbackTransaction.java b/connector/iceberg-core/core/src/main/java/org/apache/iceberg/CommitCallbackTransaction.java
index 19b74a65eca..6a2d7614a82 100644
--- a/core/src/main/java/org/apache/iceberg/CommitCallbackTransaction.java
+++ b/core/src/main/java/org/apache/iceberg/CommitCallbackTransaction.java
@@ -41,6 +41,11 @@ class CommitCallbackTransaction implements Transaction {
     return wrapped.updateSchema();
   }

+  @Override
+  public SetSchema setSchema(Schema newSchema) {
+    return wrapped.setSchema(newSchema);
+  }
+
   @Override
   public UpdatePartitionSpec updateSpec() {
     return wrapped.updateSpec();
diff --git a/core/src/main/java/org/apache/iceberg/SetSchemaImpl.java b/connector/iceberg-core/core/src/main/java/org/apache/iceberg/SetSchemaImpl.java
new file mode 100644
index 00000000000..ce6731a4e13
--- /dev/null
+++ b/core/src/main/java/org/apache/iceberg/SetSchemaImpl.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (2021) The Delta Lake Project Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+
+
+package org.apache.iceberg;
+
+public class SetSchemaImpl implements SetSchema {
+
+    private final TableOperations ops;
+    private final TableMetadata base;
+    private final Schema newSchema;
+
+    public SetSchemaImpl(TableOperations ops, TableMetadata base, Schema newSchema) {
+        this.ops = ops;
+        this.base = base;
+        this.newSchema = newSchema;
+    }
+
+    @Override
+    public Schema apply() {
+        return newSchema;
+    }
+
+    @Override
+    public void commit() {
+        // This will override the current schema
+        TableMetadata update = base.updateSchema(apply(), newSchema.highestFieldId());
+        ops.commit(base, update);
+    }
+}
diff --git a/core/src/main/java/org/apache/iceberg/TableMetadata.java b/connector/iceberg-core/core/src/main/java/org/apache/iceberg/TableMetadata.java
index afa2c7ac2d5..52546f02a75 100644
--- a/core/src/main/java/org/apache/iceberg/TableMetadata.java
+++ b/core/src/main/java/org/apache/iceberg/TableMetadata.java
@@ -1339,11 +1339,15 @@ public class TableMetadata implements Serializable {
     }

     private int addSchemaInternal(Schema schema, int newLastColumnId) {
-      Preconditions.checkArgument(
-          newLastColumnId >= lastColumnId,
-          "Invalid last column ID: %s < %s (previous last column ID)",
-          newLastColumnId,
-          lastColumnId);
+      // Since we use txn.setSchema instead of txn.updateSchema, we are manually setting the new
+      // schema. Thus, if we drop the last column, it is clearly possible and valid for the
+      // newLastColumnId to be < the previous lastColumnId. Thus, we ignore this check.
+      //
+      // Preconditions.checkArgument(
+      //    newLastColumnId >= lastColumnId,
+      //    "Invalid last column ID: %s < %s (previous last column ID)",
+      //    newLastColumnId,
+      //    lastColumnId);

       int newSchemaId = reuseOrCreateNewSchemaId(schema);
       boolean schemaFound = schemasById.containsKey(newSchemaId);
--
2.39.2 (Apple Git-143)
